row
row.first
row.first?
row
value.flatten
value
klass.where(value)
klass
c
klass
c
value
value.keysvalue
value.keys
value.key
key
value
value.class
value.first
value.key
value
c
Winery.count
c
q
c
value
value.first
value
key
c
Winery.first.wines
Winery.first
Winery.pluck(:name)
Winery.pluck(&:name)
file
file.rows.count
Winery.count
c
Winery.count
c
Winery.count
c
Winery.count
Winery.delete_all
Winery.all.destroy
Winery.all.delete
Winery.delete.all
Winery.count
c
Winery.count
c
Winery.find_by(name: "Ernest & Hulio Gallows")
Winery.count
c
q
c
self.legend
self
c
q
n
c
legend
row
c
legend
row
c
file.create_records!
file
Wine.count
file.legend
c
file.mappings.last.legend
file.mappings.last
file
c
attrs
attrs[:name]
Winery.last
file
c
Winery.last
record.save
record
winery.save
record
value
c
value
c
legend
value
x
k
row
value
c
value
value[x] = row[y]
y
value
x
c
value
key
c
attr
c
value
value[value.keys.first] = row[value.values.first]
value[value.keys.first] = row[value.value.first]
value[keys.first] = row[value.first]
value.values
value.keys
row
value.keys
value.first
value
key
row
klass
value
klass
row
c
row
value
value["name"] = "blahDD"
value["name"] = blah
value.keys
value.first
vaue.first
value
key
klass
row["wine"]
row
c
legend
value
key
c
klass.new(value)
klass.new(values)
value
values
key
value.values
value.value.values
value.keys
value
value.class
value.key
value.first
value
value.first
value[0]
value
legend
klass
c
value.is_a? Hash
value.hash
value.methods.grep(/hash/)
value.hash?
value
key
c
v
k
legend.first
legend
legend.key
legend.class
legend
legend.first
legend.first.key
legend.first
legend
k
v
k
c
return
row
c
legend.keys
legend.first
legend
exit
c
row
legend
self.mappings.last.legend
legend
c
self.legend
self.mappings.last.legend
self.mappings.last
self
c
self.mappings.last.legend.class == Hash
self.mappings.last.legend.hash?
self.mappings.last.legend
self.mappings.last
self
self.mappings.last.legend
self.mappings.last
self.mapping
self
slef
file
row
c
Buttafly::Mapping.count
Mapping.count
Winery.count
file.mappings.first
file
Winery.first
Winery.pluck(&:name)
Winery.count
c
x.errors.messages
x.errors
x.save
x.valid?
x
x = file.mappings.new(attrs)
file.mappings.new(attrs)
file.mappins.new(attrs)
attrs
c
attrs
c
file.mappings
file
c
file.may_map?
file.aasm_state
file
c
tm
subject.targetable_attrs
subject
tm.classify.constantize
tm.classify
tm
subject.class
subject
c
(columns + subject.targetable_columns).must_equal columns
columns.clas
columns.merge(subject.targetable_columns).must_equal columns
